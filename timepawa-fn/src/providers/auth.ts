import { AuthProvider } from "@refinedev/core";

import { API_URL, dataProvider } from "./data";

export const authCredentials = {
  email: "muhirwa232@gmail.com",
  password: "password",
};

export const authProvider: AuthProvider = {
  login: async ({ email, password }) => {
    try {
      //call the login mutation
      // dataprovider.custom is a function that allows you to make custom requests to the server
      // this will call dataprovider which will go through the fetchWrapper function
      const data = await dataProvider.custom({
        url: API_URL,
        method: "post",
        headers: {},
        meta: {
          variables: { email, password },
          // pass the email to see if the user exist and if so, return the access token
          rawQuery: `
                    mutation Login($email: String!) {
                        login(email: $email) {
                            accessToken
                        }
                    }
                `,
        },
      });
      // save the access token in the local storage
      localStorage.setItem("access_Token", data.login.accessToken);

      return {
        success: true,
        redirectTo: "/",
      };
    } catch (e) {
      // handle the error here
      const error = e as Error;

      return {
        success: false,
        error: {
          message:
            "message" in error ? error.message : "An unknown error occurred",
          name: "name" in error ? error.name : "Invalid credentials",
        },
      };
    }
  },
  // this will be called when the user logs out, simply remove the access token from the local storage
  logout: async () => {
    localStorage.removeItem("access_Token");
    return {
      success: true,
      redirectTo: "/login",
    };
  },
  // On error this will be called and the error will be displayed
  onError: (error) => {
    // a check to see if the error is an authentication error
    // if so set the logout to true
    if (error.statusCode === "UNAUTHENTICATED") {
      return {
        logout: true,
        ...error,
      };
    }
    return {
      error,
    };
  },
  check: async () => {
    try {
      // Get the identity of the user
      // this is used to know if the user is authenticated or not
      await dataProvider.custom({
        url: API_URL,
        method: "post",
        headers: {},
        meta: {
          rawQuery: `
                    query Me {
                        me {
                            name
                        }
                    }
                `,
        },
      });

      // if the user is authenticated return to home
      return {
        success: true,
        redirectTo: "/",
      };

      // if the user is not authenticated return to login
    } catch (e) {
      return {
        success: false,
        redirectTo: "/login",
      };
    }
  },
  getIdentity: async () => {
    const accessToken = localStorage.getItem("access_Token");

    try {
      // call the graphQL api to get the user details
      //we are using the me:any because the graphql Api does not have a type for the me query yet
      // we will have to add some queries and mutations later and change this to the user which will be generated by codegen
      const { data } = await dataProvider.custom({
        url: API_URL,
        method: "post",
        headers: accessToken
          ? {
              Authorization: `Bearer ${accessToken}`,
            }
          : {},
        meta: {
          // get the user information such as name, email, etc
          rawQuery: `
                    query Me {
                        me {
                            id
                            name
                            email
                            phone
                            jobTitle
                            Timezone
                            avatarUrl
                        }
                    }
                `,
        },
      });
      // return the user information
      return data.me;
    } catch (e) {
      return undefined;
    }
  },
};
